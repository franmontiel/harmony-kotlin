// required te buildscript to add some of the plugins:w
buildscript {
  repositories {
    google()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.squareup.sqldelight:gradle-plugin:$sql_delight_version"
    classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
  }
}

plugins {
  id("com.android.library")
  id 'org.jetbrains.kotlin.multiplatform'
  id 'kotlin-kapt'
  id 'kotlin-android-extensions'
  id 'kotlinx-serialization'
}

apply plugin: "com.squareup.sqldelight"

group 'com.harmony.core'
version '0.0.1'

// configuration of the Android preset
android {
  defaultConfig {
    minSdkVersion 16
    compileSdkVersion 28
  }
  packagingOptions {
    exclude "META-INF/*"
  }
}

kotlin {
  final def iosTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
  targetFromPreset(iosTarget, "ios") {
    binaries {
      framework("SDK")
    }
  }

  android()

  jvm()

  sourceSets {
    commonMain {
      dependencies {
        implementation kotlin('stdlib-common')

        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"

        // serialization library
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

        // SQL Delight
        implementation "com.squareup.sqldelight:runtime:$sql_delight_version"

        // http client library
        implementation "io.ktor:ktor-client-core:$ktor_version"
        implementation "io.ktor:ktor-client-json:$ktor_version"
        implementation "io.ktor:ktor-client-logging:$ktor_version"
        implementation "io.ktor:ktor-client-serialization:$ktor_version"

        // date library
        implementation "com.soywiz.korlibs.klock:klock:$klock_version" // Common
      }
    }

    commonTest {
      dependencies {

        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

        implementation kotlin('test-common')
        implementation kotlin('test-annotations-common')
      }
    }

    jvmMain {
      dependencies {
        implementation kotlin('stdlib-jdk8')
        api "com.google.code.gson:gson:$gson_version"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
        implementation "com.squareup.sqldelight:sqlite-driver:$sql_delight_version"
      }
    }

    jvmTest {
      dependencies {
        implementation kotlin('test')
        implementation kotlin('test-junit')
      }
    }

    androidMain {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

        //arch components
        api "android.arch.lifecycle:runtime:1.1.1"
        api "android.arch.lifecycle:extensions:1.1.1"
        implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'


        // dagger
        api "com.google.dagger:dagger:$dagger_version"
        api "com.google.dagger:dagger-android:$dagger_version"
        api "com.google.dagger:dagger-android-support:$dagger_version"

        // Android Support
        api "androidx.appcompat:appcompat:1.1.0"
        implementation 'androidx.coordinatorlayout:coordinatorlayout:1.0.0'

        // Database
        implementation "androidx.sqlite:sqlite:2.0.1"
        implementation "androidx.sqlite:sqlite-framework:2.0.1"

        api "com.google.dagger:dagger:$dagger_version"
        api "com.google.dagger:dagger-android:$dagger_version"
        api "com.google.dagger:dagger-android-support:$dagger_version"

        // SQL Delight
        implementation "com.squareup.sqldelight:android-driver:$sql_delight_version"

        // serialization
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

        // ktor android
        implementation "io.ktor:ktor-client-android:$ktor_version"
        implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
        implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
        implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
        implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
      }
    }
    androidTest {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

        implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
      }
    }
    iosMain {
      dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"

        implementation "com.squareup.sqldelight:native-driver:$sql_delight_version"
        implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version")

        // ktor ios runtine
        implementation("io.ktor:ktor-client-ios:$ktor_version")
        implementation("io.ktor:ktor-client-json-native:$ktor_version")
        implementation("io.ktor:ktor-client-serialization-native:$ktor_version")
        implementation("io.ktor:ktor-client-logging-native:$ktor_version")
        implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version")

      }

    }
    iosTest {

    }
  }
}

dependencies {
  kapt "android.arch.lifecycle:compiler:0.1.1"
}

sqldelight {
  CacheDatabase {
    packageName = "com.harmony.kotlin.data.datasource.database"
    sourceFolders = ["sqldelight"]
  }
}

task iosTest {
  def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
  dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
  group = JavaBasePlugin.VERIFICATION_GROUP
  description = "Runs tests for target 'ios' on an iOS simulator"

  doLast {
    def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
    exec {
      commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
    }
  }
}

configurations {
  compileClasspath
}

task copyFramework {
  final File frameworkDir = new File(buildDir, "xcode-frameworks")
  def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
  def framework = kotlin.targets.ios.compilations.main.target.binaries.findFramework("Shared", buildType)

  doLast {
    def srcFile = framework.outputFile
    copy {
      from srcFile.parent
      into frameworkDir
      include 'Shared.framework/**'
      include 'Shared.framework.dSYM'
    }
  }
}
