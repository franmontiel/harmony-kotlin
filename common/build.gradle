// required te buildscript to add some of the plugins:w
buildscript {
  repositories {
    google()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.squareup.sqldelight:gradle-plugin:$sql_delight_version"
    classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
  }
}

plugins {
  id("com.android.library")
  id 'org.jetbrains.kotlin.multiplatform'
  id 'kotlin-kapt'
  id 'kotlin-android-extensions'
  id 'kotlinx-serialization'

  // bintray plugins
  id "base"
  id "maven-publish"
}

apply plugin: "com.squareup.sqldelight"
apply plugin: 'com.jfrog.bintray'

// bintray constants
def GROUP_ID="com.mobilejazz"// Your orginization in reverse domain notation. For example:  def GROUP_ID="com.fudge"
def ARTIFACT_ID="harmony-kotlin" // The name you gave your package in bintray. In our example it would be:  def ARTIFACT_ID="kotlin-awesome-printer"

def BINTRAY_REPOSITORY="harmony-kotlin" // What you named your repository in bintray. In our example it would be "myrepository"
def BINTRAY_ORGANIZATION="Mobile Jazz" //  Your public facing Bintray name.

def ISSUE_URL="https://github.com/mobilejazz/harmony-kotlin/issues" // A link to an issue tracker for the library, in our example: "https://github.com/natanfudge/KotlinAwesomePrinter/issues"
def SITE_URL="https://harmony.mobilejazz.com/" // A link to the library's site. In our example: "https://github.com/natanfudge/KotlinAwesomePrinter"
def VCS_URL="https://github.com/mobilejazz/harmony-kotlin.git" // A link to the version control system (where the code is stored). In our example: "https://github.com/natanfudge/KotlinAwesomePrinter.git"
def LIBRARY_VERSION_NAME=0.1 // The current version of your library. You will need to update this value whenever you uplod a new release. For example: 1.0

group GROUP_ID
version LIBRARY_VERSION_NAME

// configuration of the Android preset
android {
  defaultConfig {
    minSdkVersion 16
    compileSdkVersion 28
  }

  packagingOptions {
    exclude "META-INF/*"
  }


  sourceSets {
    main {
      manifest.srcFile 'src/androidMain/AndroidManifest.xml'
      java.srcDirs = ['src/androidMain/kotlin']
      resources.srcDirs = ['src/androidMain/kotlin']
    }
    test {
      java.srcDirs = ['src/androidTest/kotlin']
    }
  }
}

kotlin {

  android {
    publishLibraryVariants("release", "debug")
  }

  final def iosTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
  targetFromPreset(iosTarget, "ios") {
    binaries {
      framework("SDK")
    }
  }

  android()
  jvm()

  sourceSets {
    commonMain {
      dependencies {
        implementation kotlin('stdlib-common')

        // coroutines
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"

        // serialization library
        api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
        api "org.jetbrains.kotlinx:kotlinx-serialization-cbor-common:$serialization_version"

        // SQL Delight
        api "com.squareup.sqldelight:runtime:$sql_delight_version"

        // http client library
        api "io.ktor:ktor-client-core:$ktor_version"
        api "io.ktor:ktor-client-json:$ktor_version"
        api "io.ktor:ktor-client-logging:$ktor_version"
        api "io.ktor:ktor-client-serialization:$ktor_version"

        // date library
        implementation "com.soywiz.korlibs.klock:klock:$klock_version" // Common

        api "co.touchlab:stately-common:1.0.2"
      }
    }

    commonTest {
      dependencies {

        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

        implementation kotlin('test-common')
        implementation kotlin('test-annotations-common')
      }
    }

    jvmMain {
      dependencies {
        implementation kotlin('stdlib-jdk8')

        api "com.google.code.gson:gson:$gson_version"

        api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
        api "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serialization_version"

        api "com.squareup.sqldelight:sqlite-driver:$sql_delight_version"
      }
    }

    jvmTest {
      dependencies {
        implementation kotlin('test')
        implementation kotlin('test-junit')
      }
    }

    androidMain {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        // coroutines
        api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

        //arch components
        api "android.arch.lifecycle:runtime:1.1.1"
        api "android.arch.lifecycle:extensions:1.1.1"
        implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'


        // dagger
        api "com.google.dagger:dagger:$dagger_version"
        api "com.google.dagger:dagger-android:$dagger_version"
        api "com.google.dagger:dagger-android-support:$dagger_version"

        // Android Support
        api "androidx.appcompat:appcompat:1.1.0"
        implementation 'androidx.coordinatorlayout:coordinatorlayout:1.0.0'

        // Database
        api "androidx.sqlite:sqlite:2.0.1"
        api "androidx.sqlite:sqlite-framework:2.0.1"

        api "com.google.dagger:dagger:$dagger_version"
        api "com.google.dagger:dagger-android:$dagger_version"
        api "com.google.dagger:dagger-android-support:$dagger_version"

        // SQL Delight
        api "com.squareup.sqldelight:android-driver:$sql_delight_version"

        // serialization
        api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
        api "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serialization_version"

        // ktor android
        api "io.ktor:ktor-client-android:$ktor_version"
        api "io.ktor:ktor-client-core-jvm:$ktor_version"
        api "io.ktor:ktor-client-json-jvm:$ktor_version"
        api "io.ktor:ktor-client-logging-jvm:$ktor_version"
        api "io.ktor:ktor-client-serialization-jvm:$ktor_version"

        // bugfender
        api "com.bugfender.sdk:android:3.+"
      }
    }

    androidTest {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
        api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

        api "io.ktor:ktor-client-mock-jvm:$ktor_version"
      }
    }

    iosMain {
      dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib")

        // coroutines
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"

        // sqldelight
        api "com.squareup.sqldelight:native-driver:$sql_delight_version"

        // ktor ios runtine
        api "io.ktor:ktor-client-ios:$ktor_version"
        api "io.ktor:ktor-client-json-native:$ktor_version"
        api "io.ktor:ktor-client-serialization-native:$ktor_version"
        api "io.ktor:ktor-client-logging-native:$ktor_version"

        // serialization
        api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
        api "org.jetbrains.kotlinx:kotlinx-serialization-cbor-native:$serialization_version"
      }
    }

    iosTest {

    }
  }
}

dependencies {
  kapt "android.arch.lifecycle:compiler:0.1.1"
}

sqldelight {
  CacheDatabase {
    packageName = "com.harmony.kotlin.data.datasource.database"
    sourceFolders = ["sqldelight"]
  }
}

configurations {
  compileClasspath
}

task copyFramework {
  final File frameworkDir = new File(buildDir, "xcode-frameworks")
  def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
  def framework = kotlin.targets.ios.compilations.main.target.binaries.findFramework("Shared", buildType)

  doLast {
    def srcFile = framework.outputFile
    copy {
      from srcFile.parent
      into frameworkDir
      include 'Shared.framework/**'
      include 'Shared.framework.dSYM'
    }
  }
}

// Bintray publishing configuration

afterEvaluate {
  project.publishing.publications.all {
    // rename artifacts
    groupId = GROUP_ID
    if (it.name.contains('metadata')) {
      artifactId = "$ARTIFACT_ID"
    } else {
      artifactId = "$ARTIFACT_ID-$name"
    }
  }
}

def getBintrayUserProperty() {
  return "joselufo-mj"
//  return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
  return "9ddf8319ad2ee90c08d73985ff42fd0144a9e820"
//  return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
}

bintray {
  //A user name of bintray to A, and API key of Bintray to B.I do not want to include API Key in git,
  // so I am gradle.properties writing locally.
  // Gradle's property file is read in the order of gradle in the home directory> gradle in the project directory,
  // so if it is written in property in the home directory, it will be useful for other projects as well.
  user = getBintrayUserProperty()
  key = getBintrayApiKeyProperty()
  //f you set publish to true, the new version will be published the moment you upload to bintray. If false, it will not be published unless you press the publish button on the bintray web.
  // It is recommended that you make it false because it can prevent an accident that you accidentally release the latest version.
  publish = false

  pkg {
    repo = BINTRAY_REPOSITORY
    name = ARTIFACT_ID
    userOrg = getBintrayUserProperty()
    licenses = ['Apache-2.0']
    vcsUrl = VCS_URL
    websiteUrl = SITE_URL
    issueTrackerUrl = ISSUE_URL

    version {
      name = LIBRARY_VERSION_NAME
      vcsTag = LIBRARY_VERSION_NAME
      released = new Date()
    }
  }
}

// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
//In the mpp configuration of one module after 1.3,
// it is not uploaded unless you explicitly specify artifacts in publications like this.
// It is not necessary to have the findAll part,
// [project name]-kotlinMultiplatformbut a directory containing only pom files will be uploaded, so it is better to exclude it.
bintrayUpload.doFirst {
  publications = publishing.publications.collect {
    it.name
  }.findAll {
    it != "kotlinMultiplatform"
  }
}

//The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
// This will create maven artifacts when running bintrayUplaod's task.
bintrayUpload.dependsOn publishToMavenLocal
