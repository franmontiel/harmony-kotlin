[versions]
kotlin = "1.8.0"
# Plugins
androidGradlePlugin = "7.4.0"
detekt = "1.22.0"
gradleVersions = "0.44.0"
ksp = "1.8.0-1.0.8"
ktlint = "11.0.0"
taskTree = "2.1.1"
versionCatalogUpdate = "0.7.0"
# KMM
coroutines = "1.6.4"
datetime = "0.4.0"
ktor = "2.2.2"
serialization = "1.4.1"
sqldelight = "1.5.5"
uuidLib = "0.6.0"
# Android
activityCompose = "1.6.1"
appCompat = "1.6.0"
bugfender = "3.1.0"
compose = "1.3.3"
composeCompiler = "1.4.0"
composeDestinations = "1.7.32-beta"
composeMaterial = "1.3.1"
constraintLayout = "2.1.4"
coordinatorLayout = "1.2.0"
coreKtx = "1.9.0"
gson = "2.9.1"
lifecycle = "2.5.1"
material = "1.7.0"
# Testing
androidxJunitKtx = "1.1.5"
androidxTest = "1.5.0"
junit = "4.13.2"
lifecycleRuntime = "2.5.1"
mockk = "1.13.3"
mockmp = "1.11.0"
roboelectric = "4.9.2"

[libraries]
# KMM
coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "datetime" }
ktor-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-ios = { module = "io.ktor:ktor-client-ios", version.ref = "ktor" }
ktor-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-mockJvm = { module = "io.ktor:ktor-client-mock-jvm", version.ref = "ktor" }
ktor-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-serializationJson = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
serialization-cbor = { module = "org.jetbrains.kotlinx:kotlinx-serialization-cbor", version.ref = "serialization" }
serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "serialization" }
serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
sqldelight-androidDriver = { module = "com.squareup.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-nativeDriver = { module = "com.squareup.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-runtime = { module = "com.squareup.sqldelight:runtime", version.ref = "sqldelight" }
sqldelight-sqliteDriver = { module = "com.squareup.sqldelight:sqlite-driver", version.ref = "sqldelight" }
uuidLib = { module = "com.benasher44:uuid", version.ref = "uuidLib" }
# Android
activityCompose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }
appCompat = { module = "androidx.appcompat:appcompat", version.ref = "appCompat" }
bugfender = { module = "com.bugfender.sdk:android", version.ref = "bugfender" }
composeDestinations = { module = "io.github.raamcosta.compose-destinations:core", version.ref = "composeDestinations" }
composeDestinationsKsp = { module = "io.github.raamcosta.compose-destinations:ksp", version.ref = "composeDestinations" }
composeMaterial = { module = "androidx.compose.material:material", version.ref = "composeMaterial" }
composeUi = { module = "androidx.compose.ui:ui", version.ref = "compose" }
composeUiToolingPreview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
constraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayout" }
coordinatorLayout = { module = "androidx.coordinatorlayout:coordinatorlayout", version.ref = "coordinatorLayout" }
coreKtx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
lifecycleRuntimeKtx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
lifecycleViewModelCompose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
material = { module = "com.google.android.material:material", version.ref = "material" }
# JVM
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
# Testing
androidTest-core = { module = "androidx.test:core", version.ref = "androidxTest" }
androidTest-junitKtx = { module = "androidx.test.ext:junit-ktx", version.ref = "androidxJunitKtx" }
androidTest-lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-testing", version.ref = "lifecycleRuntime" }
androidTest-rules = { module = "androidx.test:rules", version.ref = "androidxTest" }
androidTest-runner = "androidx.test:runner:1.5.2"
junit = { module = "junit:junit", version.ref = "junit" }
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlinTestJunit = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
roboelectric = { module = "org.robolectric:robolectric", version.ref = "roboelectric" }

[bundles]
ktor = [
    "ktor-contentNegotiation",
    "ktor-core",
    "ktor-logging",
    "ktor-serializationJson",
]
serialization = [
    "serialization-cbor",
    "serialization-core",
    "serialization-json",
]

[plugins]
androidGradle = { id = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
gradleVersions = { id = "com.github.ben-manes.versions", version.ref = "gradleVersions" }
kotlinGradle = { id = "org.jetbrains.kotlin:kotlin-gradle-plugin" , version.ref = "kotlin"}
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }
mockmp = { id = "org.kodein.mock.mockmp", version.ref = "mockmp" }
sqldelight = { id = "com.squareup.sqldelight", version.ref = "sqldelight" }
taskTree = { id = "com.dorongold.task-tree", version.ref = "taskTree" }
versionCatalogUpdate = { id = "nl.littlerobots.version-catalog-update", version.ref = "versionCatalogUpdate" }