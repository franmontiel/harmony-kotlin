// required te buildscript to add some of the plugins:w
buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.squareup.sqldelight:gradle-plugin:$sql_delight_version"
    classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
  }
}

plugins {
  id("com.android.library")
  id 'org.jetbrains.kotlin.multiplatform'
  id 'kotlinx-serialization'
}

apply plugin: "com.squareup.sqldelight"

// Maven publish
apply from: 'gradle-mvn-push.gradle'

// configuration of the Android preset
android {

  defaultConfig {
    minSdkVersion android_min_sdk_version
    compileSdkVersion android_compile_sdk_version
    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
  }

  sourceSets {
    main {
      manifest.srcFile 'src/androidMain/AndroidManifest.xml'
      java.srcDirs = ['src/androidMain/kotlin']
      resources.srcDirs = ['src/androidMain/kotlin']
      res.srcDirs = ['src/androidMain/res']
    }
    test {
      manifest.srcFile 'src/androidMain/AndroidManifest.xml'
      java.srcDirs = ['src/androidTest/kotlin']
      resources.srcDirs = ['src/androidTest/kotlin']
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests.includeAndroidResources = true
  }
}

kotlin {

  android {
    publishLibraryVariants("release")
  }

  final def iosTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
  targetFromPreset(iosTarget, "ios") {
    binaries {
      framework("SDK")
    }
  }

  android()
  jvm()

  sourceSets {

    all {
      languageSettings {
        optIn("kotlin.RequiresOptIn")
        optIn("kotlinx.coroutines.ExperimentalCoroutinesApi")
      }
    }

    commonMain {
      dependencies {

        // coroutines
        api("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version") {
          version {
            strictly "$coroutines_version"
          }
        }

        // serialization library
        api "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"
        api "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serialization_version"

        // SQL Delight
        api "com.squareup.sqldelight:runtime:$sql_delight_version"

        // http client library
        api "io.ktor:ktor-client-core:$ktor_version"
        api "io.ktor:ktor-client-json:$ktor_version"
        api "io.ktor:ktor-client-logging:$ktor_version"
        api "io.ktor:ktor-client-serialization:$ktor_version"

        // date library
        api "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinx_datetime_version"

        // UUID library
        implementation "com.benasher44:uuid:$uuid_lib_version"

        api "co.touchlab:stately-common:$stately"
      }
    }

    commonTest {
      dependencies {
        implementation kotlin('test-common')
        implementation kotlin('test-annotations-common')
        implementation("io.ktor:ktor-client-mock:$ktor_version")
      }
    }

    jvmMain {
      dependencies {
        implementation 'com.google.code.gson:gson:2.8.7'

        api "com.squareup.sqldelight:sqlite-driver:$sql_delight_version"

        // ktor
        api "io.ktor:ktor-client-okhttp:$ktor_version"

        api "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
      }
    }

    jvmTest {
      dependencies {
        implementation kotlin('test')
        implementation kotlin('test-junit')
      }
    }

    androidMain {
      dependencies {
        api("io.ktor:ktor-client-android:$ktor_version")
        api("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version")
        api("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version")

        //arch components
        api "android.arch.lifecycle:runtime:1.1.1"
        api "android.arch.lifecycle:extensions:1.1.1"
        implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

        // Android Support
        api "androidx.appcompat:appcompat:1.3.1"
        implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'

        // SQL Delight
        api "com.squareup.sqldelight:android-driver:$sql_delight_version"

        // bugfender
        api "com.bugfender.sdk:android:3.0.9"
      }
    }

    androidTest {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"

        // Instrumentation tests
        implementation("androidx.test:core:1.4.0")
        implementation("androidx.test:runner:1.4.0")
        implementation("androidx.test:rules:1.4.0")
        implementation 'androidx.test.ext:junit-ktx:1.1.3'
        implementation("org.robolectric:robolectric:4.7.1")
      }
    }

    iosMain {
      dependencies {
        api "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"
        api "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serialization_version"

        // sqldelight
        api "com.squareup.sqldelight:native-driver:$sql_delight_version"
        api("io.ktor:ktor-client-ios:$ktor_version")
      }
    }

    iosTest {

    }
  }

  preBuild {
    it.dependsOn ktlintFormat
  }
}


dependencies {
  implementation "androidx.lifecycle:lifecycle-common-java8:2.3.1"
}

sqldelight {
  CacheDatabase {
    packageName = "com.harmony.kotlin.data.datasource.database"
    sourceFolders = ["sqldelight"]
  }
}

configurations {
  compileClasspath
}

task copyFramework {
  final File frameworkDir = new File(buildDir, "xcode-frameworks")
  def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
  def framework = kotlin.targets.ios.compilations.main.target.binaries.findFramework("Shared", buildType)

  doLast {
    def srcFile = framework.outputFile
    copy {
      from srcFile.parent
      into frameworkDir
      include 'Shared.framework/**'
      include 'Shared.framework.dSYM'
    }
  }
}

// TODO include real documentation
task javadocJar(type: Jar) {
  archiveClassifier.set("javadoc")
}

// added ktlint check as a dependency of the ./gradlew check task
check.dependsOn 'ktlintCheck'
